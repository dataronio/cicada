* tartlet
- string_t
- test proof: f == (x) => f(x)
- be sure about the use of TheVal and friends
- extend tartlet to pie
- the little typer as test
- use `todo` as un-implemented
- block of let and return
- extend tartlet to define new types
  - keep it subrecursive, but be generic about data and ind, rec and iter
* minitt
- be sure about the use of Pattern
  - write some notes
  - Norm do not use Pattern
* cicada
- subtype relation between club and members and class and supers
  recursively extended to fields in record and pi and si
- eval for cicada without_logic_variable
- class and extends
- partially filled data can be used as type
- compile to js with runtime type information
  - this means keep Val serde-able
    - Val includes ValFn which contains Exp
      this Exp is also serde-able
* module system
- module as value with opaque module_t
* partech
- ErrMsg and Span
- better report with ErrMsg in context
- [important] fix equals between rules -- how ? by ruleGen with uuid ?
- concrete syntax for rule
  - to use partech as more general tool out side scala
    (like the rosie pattern language)
