- sat solver vis (how it is vis-ed?)
- cook's machine for trans algo to lin-algo
- new machine for call-by-name or call-by-need lambda
* simple
- theory about equality between lambda terms
  - reflexivity
    symmetry
    transitivity
    congruence
  - beta_step
  - eta_step
- [note]
  in this implementation I will use reduction instead of closure.
  lexical scope is not a problem (or say, the phenomenon of dynamic scope will not occur)
- church
- curry
* joy
- for simple typed
- how to specify rules ?
  - need to use stack ?
* tartlet
- [note] why we *do need* "type directed norm-by-eval" here ?
- extend tartlet to pie
- the little typer as test
- use `TODO` as un-implemented
- block of let and return
- be sure about the use of TheVal and friends
- test proof: f == (x) => f(x)
- extend tartlet to define new types
  - keep it subrecursive, but be generic about data and ind, rec and iter
- add cumulative (maybe non-cumulative) levels of types -- type_t(n)
* pure
- pure type system
* miniml
- about type infer
* sysf
* minitt
- [note] why we *do not need* "type directed norm-by-eval" here ?
- [question] I think the use of NormEnv will break `equals`
- add `eqv_t` `same` `replace`
- add constrains to type constructors
- why not jsut use letrec for every definition ? -- learn from EOPL
- add cumulative (maybe non-cumulative) levels of types -- type_t(n)
- be sure about the use of Pattern
  - write some notes
  - Norm do not use Pattern
  - note about how letrec is handled at lookup-time
* module system
- module as value with opaque module_t is not enough -- learn from EOPL
* partech
- ErrMsg and Span
- better report with ErrMsg in context
- [important] fix equals between rules -- how ? by ruleGen with uuid ?
- concrete syntax for rule
  - to use partech as more general tool out side scala
    (like the rosie pattern language)
* compile with cps
