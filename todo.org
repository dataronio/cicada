* readme
- compile to human readable javascript
- markdown support for literal programming
* cicada
- infer_norm_neu return list
------
- is it ok to not use NormEnv in NormTelescope and NormNeuChoice ?
- fulfill_norm
  - subtype relation between class and supers
  - value of a field must be full value
    full_p, part_p
- cumulative levels of types -- type_t(n)
  - this should be simple since we have subtype relation and infer
- string_t
- check undefined during top loading
- compile to js with runtime type information
  - this means keep Val serde-able
    - Val includes ValFn which contains Exp
      this Exp is also serde-able
- termination check
- markdown support
* tartlet
- why we *do need* "type directed norm-by-eval" here ?
- extend tartlet to pie
- the little typer as test
- use `TODO` as un-implemented
- block of let and return
- be sure about the use of TheVal and friends
- test proof: f == (x) => f(x)
- extend tartlet to define new types
  - keep it subrecursive, but be generic about data and ind, rec and iter
- add cumulative (maybe non-cumulative) levels of types -- type_t(n)
* minitt
- why we *do not need* "type directed norm-by-eval" here ?
- [question] I think the use of NormEnv will break `equals`
- add `eqv_t` `same` `replace`
- add constrains to type constructors
- why not jsut use letrec for every definition ? -- learn from EOPL
- add cumulative (maybe non-cumulative) levels of types -- type_t(n)
- be sure about the use of Pattern
  - write some notes
  - Norm do not use Pattern
  - note about how letrec is handled at lookup-time
* module system
- module as value with opaque module_t is not enough -- learn from EOPL
* partech
- ErrMsg and Span
- better report with ErrMsg in context
- [important] fix equals between rules -- how ? by ruleGen with uuid ?
- concrete syntax for rule
  - to use partech as more general tool out side scala
    (like the rosie pattern language)
