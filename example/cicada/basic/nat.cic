data nat_t {
  case zero_t
  case succ_t(prev: nat_t)
}

fn nat_add(x: nat_t, y: nat_t): nat_t = {
  choice (x) {
    case zero_t => y
    case succ_t => succ_t(nat_add(x.prev, y))
  }
}

fn nat_mul(x: nat_t, y: nat_t): nat_t = {
  choice (x) {
    case zero_t => zero_t
    case succ_t => nat_add(y, nat_mul(x.prev, y))
  }
}

fn nat_factorial(x: nat_t): nat_t = {
  choice (x) {
    case zero_t => succ_t(zero_t)
    case succ_t => nat_mul(x, nat_factorial(x.prev))
  }
}

fn nat_even_p(x: nat_t): bool_t = {
  choice (x) {
    case zero_t => true_t
    case succ_t => choice (x.prev) {
      case zero_t => false_t
      case succ_t => nat_even_p(x.prev.prev)
    }
  }
}
