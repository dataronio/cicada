datatype bool_t {
  case true_t
  case false_t
}

let true: true_t = true_t
let false: false_t = false_t

fn bool_not(x: bool_t): bool_t = {
  x choice {
    case true_t => false
    case false_t => true
  }
}

fn bool_and(x: bool_t, y: bool_t): bool_t = {
  x choice {
    case true_t => y choice {
      case true_t => true
      case false_t => false
    }
    case false_t => false
  }
}

fn bool_or(x: bool_t, y: bool_t): bool_t = {
  x choice {
    case true_t => true
    case false_t => y choice {
      case true_t => true
      case false_t => false
    }
  }
}

eq! bool_not(true) false
eq! bool_not(false) true

eq! bool_and(true, true) true
eq! bool_and(true, false) false
eq! bool_and(false, true) false
eq! bool_and(false, false) false

eq! bool_or(true, true) true
eq! bool_or(true, false) true
eq! bool_or(false, true) true
eq! bool_or(false, false) false
