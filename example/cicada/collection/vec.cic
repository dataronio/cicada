package collection.vec

import datatype.nat.*

data vec_t(A: type_t, length: nat_t) {
  case null_vec_t(length = zero_t)
  case cons_vec_t(
    n: nat_t,
    length = succ_t(n),
    head: A,
    tail: vec_t(A, n))
}

fn vec_append(ante: vec_t(A, m), succ: vec_t(A, n)): vec_t(A, nat_add(m, n)) = {
  choice (ante) {
    case null_vec_t => succ
    case cons_vec_t => cons_vec_t(ante.head, vec_append(ante.tail, succ))
  }
}

fn vec_map(f: A -> B, vec: vec_t(A, n)): vec_t(A, n) = {
  choice (vec) {
    case null_vec_t => vec
    case cons_vec_t => cons_vec_t(f(vec.head), vec_map(f, vec.tail))
  }
}
