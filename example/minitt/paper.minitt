let bool_t: type_t = datatype {
  case true
  case false
}

eq! true[] true[]

let id: (A: type_t, A) -> A =
  (A, x) => x

let id_on_id: (A: type_t, A) -> A =
  id((A: type_t, A) -> A)(id)

eq! id(bool_t, true[]) true[]
eq! id(bool_t, false[]) false[]
eq! id_on_id id

let true: bool_t = true[]
let false: bool_t = false[]

eq! id(bool_t, true) true
eq! id(bool_t, false) false

let bool_elim: (
  C: (bool_t) -> type_t,
  C(true),
  C(false),
  b: bool_t,
) -> C(b) = {
  (C, h0, h1) => {
    case true[] => h0
    case false[] => h1
  }
}

letrec nat_t: type_t = datatype {
  case zero
  case succ[nat_t]
}

let zero: nat_t = zero[]
let one: nat_t = succ[zero]
let two: nat_t = succ[one]
let three: nat_t = succ[two]
let four: nat_t = succ[three]
let five: nat_t = succ[four]
let six: nat_t = succ[five]
let seven: nat_t = succ[six]
let eight: nat_t = succ[seven]
let nine: nat_t = succ[eight]
let ten: nat_t = succ[nine]

let bool_to_nat: (bool_t) -> nat_t = {
  // testing the use of let in block
  x => {
    let y: bool_t = x
    let f: (bool_t) -> nat_t = {
      case true[] => succ[zero]
      case false[] => zero
    }
    return f(y)
  }
}

eq! bool_to_nat(true) succ[zero]
eq! bool_to_nat(false) zero

letrec nat_rec: (
  C: (nat_t) -> type_t,
  C(zero),
  (n: nat_t, C(n)) -> C(succ[n]),
  n: nat_t,
) -> C(n) = {
  (C, a, g) => {
    case zero[] => a
    case succ[prev] => g(prev, nat_rec(C, a, g, prev))
  }
}

letrec nat_add: (nat_t, nat_t) -> nat_t = {
  case zero[] => y => y
  case succ[prev] => y => succ[nat_add(prev, y)]
}

eq! nat_add(two, two) four

let nat_double: (nat_t) -> nat_t =
  x => nat_add(x, x)

eq! nat_double(one) two
eq! nat_double(two) four
eq! nat_double(three) six

letrec nat_mul: (nat_t, nat_t) -> nat_t = {
  case zero[] => y => zero
  case succ[prev] => y => nat_add(y, nat_mul(prev, y))
}

let nat_square: (nat_t) -> nat_t =
  x => nat_mul(x, x)

eq! nat_square(one) one
eq! nat_square(two) four
eq! nat_square(three) nine

letrec nat_eq: (nat_t, nat_t) -> bool_t = {
  case zero[] => {
    case zero[] => true
    case succ[_] => false
  }
  case succ[x_prev] => {
    case zero[] => false
    case succ[y_prev] => nat_eq(x_prev, y_prev)
  }
}

eq! nat_eq(one, one) true
eq! nat_eq(two, two) true
eq! nat_eq(one, two) false
eq! nat_eq(two, one) false

letrec list_t: (A: type_t) -> type_t = {
  A => datatype {
    case null
    case cons $[A, list_t(A)]
  }
}

letrec list_append: (
  A: type_t,
  list_t(A),
  list_t(A),
) -> list_t(A) = {
  A => {
    case null[] => y => y
    case cons[head, tail] => y => cons[head, list_append(A, tail, y)]
  }
}

let two_zeros: list_t(nat_t) =
  cons[zero, cons[zero, null[]]]

let four_zeros: list_t(nat_t) =
  cons[zero, cons[zero, cons[zero, cons[zero, null[]]]]]

eq! list_append(nat_t, two_zeros, two_zeros) four_zeros

let one_cons_zero: $[nat_t, nat_t] = [one, zero]

eq! car(one_cons_zero) one
eq! cdr(one_cons_zero) zero

// church encoding of "and"

let and_t: (type_t, type_t) -> type_t = {
  (P, Q) =>
    (R: type_t) -> ((P, Q) -> R) -> R
}

// conjunction
// - like "remembering x, y of type P, Q for later"
// - like pattern matching on pair

let conj: (
  P: type_t,
  Q: type_t,
  P, Q,
) -> and_t(P, Q) = {
  (P, Q, x, y) =>
    (z) => (f) => f(x, y)
}

let conj_project_left: (
  P: type_t,
  Q: type_t,
  and_t(P, Q),
) -> P = {
  (P, Q, x_and_y) =>
    x_and_y(P, (x, y) => x)
}

let conj_project_right: (
  P: type_t,
  Q: type_t,
  and_t(P, Q),
) -> Q = {
  (P, Q, x_and_y) =>
    x_and_y(Q, (x, y) => y)
}

let and_commute: (
  P: type_t,
  Q: type_t,
  and_t(P, Q),
) -> and_t(Q, P) = {
  (P, Q, x_and_y) =>
    conj(Q, P,
      conj_project_right(P, Q, x_and_y),
      conj_project_left(P, Q, x_and_y))
}

let and_commute_2: (
  P: type_t,
  Q: type_t,
  and_t(P, Q),
) -> and_t(Q, P) = {
  (P, Q, x_and_y) => x_and_y(and_t(Q, P)) {
    (x, y) => conj(Q, P, y, x)
  }
}

// letrec vec_t: (A: type_t, n: nat_t) -> type_t = {
//   A => datatype {
//     case vec_null { n = zero }
//     case vec_cons $[A, prev: nat_t, vec_t(A, prev)] {
//       n = succ[prev]
//     }
//   }
// }
