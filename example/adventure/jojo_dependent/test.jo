list_t : { - type type }
list_t = {
  list_null : {
    let A: { type }
    A vec_t
  }
  list_cons : {
    let A: { type }
    let head: { A }
    let tail: { A list_t }
    A list_t
  }
}

list_append : {
  let A: { type }
  let x: { A list_t }
  let y: { A list_t }
  A list_t
}
list_append = {

}

vec_t : { - type - nat_t type }
vec_t = {
  vec_null : {
    let A: { type }
    zero A vec_t
  }
  vec_cons : {
    let A: { type }
    let prev: { nat_t }
    let head: { A }
    let tail: { prev A vec_t }
    prev succ A vec_t
  }
}

vec_append : {
  let A: { type }
  let m: { nat_t }
  let n: { nat_t }
  let x: { m A vec_t }
  let y: { n A vec_t }
  m n nat_add A vec_t
}
vec_append = {

}
